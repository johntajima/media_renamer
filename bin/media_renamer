#!/usr/bin/env ruby

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'rubygems'
require 'thor'
require_relative '../lib/media_renamer'

class MediaRenamerCLI < Thor

  desc "rename <file>|<path>", "Renames media files found in path or specific file"
  method_option :force, 
                aliases: '-f', 
                default: false,
                type: :boolean,
                desc: "Force renaming, without prompting for confirmation"
  method_option :root_path, 
                aliases: '-p',
                type: :string,
                desc: "Root path (default is path passed in)"
  method_option :target_path, 
                aliases: '-t', 
                desc: "Specify target directory to save renamed files in"
  method_option :delete_files,
                aliases: '-D',
                type: :boolean,
                default: false,
                desc: "delete files and empty directories (default moves them to ~/.deleteable)"
  method_option :debug,
                default: false,
                type: :boolean,
                desc: "Debug mode"
  method_option :preview,
                type: :boolean,
                default: false,
                desc: "Dry run - don't actually make changes"



  def rename(file)
    log.info("[Rename] Starting...")
    params = process_args(file, options)
    files = params.delete(:files)

    files.each do |file|
      log.info("Processing #{file}")
      mediafile = MediaRenamer::Mediafile.new(file)
      case mediafile.type
      when :movie
        if movie = mediafile.movie
          # render available choices
          # get selection
          new_file = MediaRenamer::Templates.render_movie(movie, mediafile, params)
          # move file
          MediaRenamer::Utils.move_file(file, new_file, params)
        else
          log.info("[Failed] Movie lookup failed. Skipping. #{mediafile.filename}")
        end
      when :tv
#        log.debug("[Rename] TV file - skip")
      when :audio
#        log.debug("[Rename] Audio file - skip")        
      when :directory
        if file == params[:root_path]
          next
        elsif File.basename(file) == "_deleteable"
          next
        else
          MediaRenamer::Utils.delete_dir(file, params)
        end
      else
        MediaRenamer::Utils.delete_file(file, params)
      end
    end
  end


  private

  def log
    MediaRenamer.logger
  end


  def process_change()
  end


  def process_args(file, options)
    file = File.expand_path(file)    
    if !File.exist?(file)
      puts "Invalid file or path - does not exist" 
      exit
    end

    debug = options.fetch(:debug)

    orig_path = File.directory?(file) ? file : File.dirname(file)
    # set root path
    root_path   = File.expand_path(options.fetch(:root_path, File.directory?(file) ? file : File.dirname(file)))
    root_path = root_path.gsub(/\/\z/,'') #strip off ending /
    
    # set target path
    target_path = File.expand_path(options.fetch(:target_path, root_path))
    target_path = target_path.gsub(/\/\z/,'') #strip off ending /
    # array of files to be processed
    files       = File.file?(file) ? [file] : Dir.glob(File.join(file, "/**/*")).sort.reverse
    
    params = {
      orig_path: orig_path,
      root_path: root_path,
      target_path: target_path,
      debug: debug,
      delete_files: options.fetch(:delete_files),
      confirmation_required: !options.fetch(:force),
      preview: options.fetch(:preview),
      files: files
    }
    log.debug JSON.pretty_generate(params) if debug
    params
  end
end


MediaRenamerCLI.start